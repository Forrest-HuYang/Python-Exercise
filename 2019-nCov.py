#%% Setup
import numpy as np
from mpl_toolkits.basemap import Basemap
from matplotlib.patches import Polygon
from matplotlib.colors import rgb2hex
import matplotlib.pyplot as plt
import pandas as pd
import json
import requests
convert_cities = {'七台河市':'七台河', '三亚市':'三亚', '三明市':'三明', '三门峡市':'三门峡', '上海|上海':'上海', '上饶市':'上饶', '东莞市':'东莞', '东营市':0, '中卫市':'中卫', '中山市':'中山', '临夏回族自治州':'临夏', '临汾市':'临汾', '临沂市':'临沂', '临沧市':'临沧', '丹东市':'丹东', '丽水市':'丽水', '丽江市':'丽江市', '乌兰察布市':'乌兰察布', '乌海市':'乌海', '乌鲁木齐市':'乌鲁木齐', '乐山市':'乐山', '九江市':'九江', '云浮市':0, '亳州市':'亳州', '仙桃市':'仙桃', '伊春市':0, '伊犁哈萨克自治州':'伊犁州', '佛山市':'佛山', '佳木斯市':'佳木斯', '保定市':'保定', '保山市':'保山市', '信阳市':'信阳', '克孜勒苏柯尔克孜自治州':0, '克拉玛依市':'第七师', '六安市':'六安', '六盘水市':'六盘水', '兰州市':'兰州', '兴安盟':'兴安盟乌兰浩特', '内江市':'内江', '凉山彝族自治州':'凉山', '包头市':'包头', '北京|北京':'北京', '北海市':'北海', '十堰市':'十堰', '南京市':'南京', '南充市':'南充', '南宁市':'南宁', '南平市':'南平', '南昌市':'南昌', '南通市':'南通', '南阳市':'南阳', '博尔塔拉蒙古自治州':0, '厦门市':'厦门', '双鸭山市':'双鸭山', '台州市':'台州', '合肥市':'合肥', '吉安市':'吉安', '吉林市':'吉林', '吐鲁番地区':'吐鲁番', '吕梁市':'吕梁', '吴忠市':'吴忠', '周口市':'周口', '呼伦贝尔市':'呼伦贝尔', '呼和浩特市':'呼和浩特', '和田地区':0, '咸宁市':'咸宁', '咸阳市':'咸阳', '哈密地区':0, '哈尔滨市':'哈尔滨', '唐山市':'唐山', '商丘市':'商丘', '商洛市':'商洛', '喀什地区':0, '嘉兴市':'嘉兴', '嘉峪关市':0, '四平市':'四平', '固原市':'固原', '塔城地区':'兵团第九师', '大兴安岭地区':'大兴安岭', '大同市':'大同', '大庆市':'大庆', '大理白族自治州':'大理', '大连市':'大连', '天水市':'天水', '天津|天津':'天津', '天门市':'天门', '太原市':'太原', '威海市':'威海', '娄底市|婁底市':'娄底', '孝感市':'孝感', '宁德市':'宁德', '宁波市':'宁波', '安庆市':'安庆', '安康市':'安康', '安阳市':'安阳', '安顺市':'安顺', '定西市':'定西', '宜宾市':'宜宾', '宜昌市':'宜昌', '宜春市':'宜春', '宝鸡市':'宝鸡', '宣城市':'宣城', '宿州市':'宿州', '宿迁市':'宿迁', '山南地区':0, '岳阳市|岳陽市':'岳阳', '崇左市':0, '巢湖市':0, '巴中市':'巴中', '巴彦淖尔市':'巴彦淖尔', '巴音郭愣蒙古自治州':0, '常州市':'常州', '常德市|常德市':'常德', '平凉市':'平凉', '平顶山市':'平顶山', '广元市':'广元', '广安市':'广安', '广州市':'广州', '庆阳市':0, '廊坊市':'廊坊', '延安市':'延安', '延边朝鲜族自治州':'延边', '开封市':'开封', '张家口市':'张家口', '张家界市|張家界市':'张家界', '张掖市':'张掖', '徐州市':'徐州', '德宏傣族景颇族自治州':'德宏州', '德州市':'德州', '德阳市':'德阳', '忻州市':'忻州', '怀化市|懷化市':'怀化', '怒江傈僳族自治州':0, '恩施土家族苗族自治州':'恩施州', '惠州市':'惠州', '成都市':'成都', '扬州市':'扬州', '承德市':'承德', '抚州市':'抚州', '抚顺市':0, '拉萨市':'拉萨', '揭阳市':'揭阳', '攀枝花市':'攀枝花', '文山壮族苗族自治州':0, '新乡市':'新乡', '新余市':'新余', '无锡市':'无锡', '日喀则地区':0, '日照市':'日照', '昆明市':'昆明', '昌吉回族自治州':0, '昌都地区':0, '昭通市':'昭通市', '晋中市':'晋中', '晋城市':'晋城', '普洱市':'普洱', '景德镇市':'景德镇', '曲靖市':'曲靖', '朔州市':'朔州', '朝阳市':'朝阳市', '本溪市':'本溪', '来宾市':0, '杭州市':'杭州', '松原市':'松原', '林芝地区':0, '果洛藏族自治州':0, '枣庄市':'枣庄', '柳州市':'柳州', '株洲市|株洲市':'株洲', '桂林市':'桂林', '梅州市':'梅州', '梧州市':'梧州', '楚雄彝族自治州':0, '榆林市':'榆林', '武威市':0, '武汉市':'武汉', '毕节地区':'毕节', '永州市|永州市':'永州', '汉中市':'汉中', '汕头市':'汕头', '汕尾市':'汕尾', '江门市':'江门', '池州市':'池州', '沈阳市':'沈阳', '沧州市':'沧州', '河池市':'河池', '河源市':'河源', '泉州市':'泉州', '泰安市':'泰安', '泰州市':'泰州', '泸州市':'泸州', '洛阳市':'洛阳', '济南市':'济南', '济宁市':'济宁', '济源市':0, '海东地区':0 , '海北藏族自治州':0, '海南':'海南', '海南藏族自治州':0, '海口市':'海口', '海西蒙古族藏族自治州':0, '淄博市':'淄博', '淮北市':'淮北', '淮南市':'淮南', '淮安市':'淮安', '深圳市':'深圳', '清远市':'清远', '温州市':'温州', '渭南市':'渭南', '湖州市':'湖州', '湘潭市|湘潭市':'湘潭', '湘西土家族苗族自治州|湘西土家族苗族自治州':'湘西自治州', '湛江市':'湛江', '滁州市':'滁州', '滨州':'滨州', '漯河市':'漯河', '漳州市':'漳州', '潍坊市':'潍坊', '潜江市':'潜江', '潮州市':'潮州', '濮阳市':'濮阳', '烟台市':'烟台', '焦作市':'焦作', '牡丹江市':'牡丹江', '玉林市':'玉林', '玉树藏族自治州':0, '玉溪市':'玉溪', '珠海市':'珠海', '甘南藏族自治州':'甘南州', '甘孜藏族自治州':'甘孜', '白城市':0, '白山市':0, '白银市':'白银', '百色市':'百色', '益阳市|益陽市':'益阳', '盐城市':'盐城', '盘锦市':'盘锦', '眉山市':'眉山', '石嘴山市':0, '石家庄市':'石家庄', '石河子市':'第八师石河子', '神农架林区':'神农架', '福州市':'福州', '秦皇岛市':'秦皇岛', '红河哈尼族彝族自治州':'红河', '绍兴市':'绍兴', '绥化市':'绥化', '绵阳市':'绵阳', '聊城市':'聊城', '肇庆市':'肇庆', '自贡市':'自贡', '舟山市':'舟山', '芜湖市':'芜湖', '苏州市':'苏州', '茂名市':'茂名', '荆州市':'荆州', '荆门市':'荆门', '莆田市':'莆田', '莱芜市':0, '菏泽市':'菏泽', '萍乡市':'萍乡', '葫芦岛市':'葫芦岛', '蚌埠市':'蚌埠', '衡水市':'衡水', '衡阳市|衡陽市':'衡阳', '衢州市':'衢州', '襄樊市':'襄阳', '西双版纳傣族自治州':'西双版纳州', '西宁市':'西宁', '西安市':'西安', '许昌市':'许昌', '贵港市':'贵港', '贵阳市':'贵阳', '贺州市':'贺州', '资阳市':'资阳', '赣州市':'赣州', '赤峰市':'赤峰', '辽源市':0, '辽阳市':'辽阳', '达州市':'达州', '运城县':'运城', '连云港市':'连云港', '迪庆藏族自治州':0, '通化市':'通化', '通辽市':'通辽', '遂宁市':'遂宁', '遵义市':'遵义', '邢台市':'邢台', '那曲地区':0, '邯郸市':'邯郸', '邵阳市|邵陽市':'邵阳', '郑州市':'郑州', '郴州市|郴州市':'郴州', '鄂尔多斯市':'鄂尔多斯', '鄂州市':'鄂州', '酒泉市':0, '重慶|重庆':'重庆', '金华市':'金华', '金昌市':'金昌', '钦州市':'钦州', '铁岭市':'铁岭', '铜仁地区':'铜仁', '铜川市':'铜川', '铜陵市':'铜陵', '银川市':'银川', '锡林郭勒盟':'锡林郭勒', '锦州市':'锦州', '镇江市':'镇江', '长春市':'长春', '长沙市|長沙市':'长沙', '长治市':'长治', '阜新市':'阜新', '阜阳市':'阜阳', '防城港市':'防城港', '阳江市':'阳江', '阳泉市':'阳泉', '阿克苏地区':'阿克苏', '阿勒泰地区':0, '阿坝藏族羌族自治州':'阿坝州', '阿拉善盟':0, '阿里地区':0, '陇南市':'陇南', '随州市':'随州', '雅安市':'雅安', '青岛市':'青岛', '鞍山市':'鞍山', '韶关市':'韶关', '马鞍山市':'马鞍山', '驻马店市':'驻马店', '鸡西市':'鸡西', '鹤壁市':'鹤壁', '鹤岗市':'鹤岗', '鹰潭市':'鹰潭', '黄冈市':'黄冈', '黄南藏族自治州':0, '黄山市':'黄山', '黄石市':'黄石', '黑河市':'黑河', '黔东南苗族侗族自治州':'黔东南州', '黔南布依族苗族自治州':'黔南州', '黔西南布依族苗族自治州':'黔西南州', '齐齐哈尔市':'齐齐哈尔', '龙岩市':'龙岩'}

def get_data():
    url = 'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5'
    mydata = json.loads(requests.get(url=url).json()['data'])
    return mydata


def get_individual_cities():
    global cities_data
    global province_data
    global TWN
    for province in province_data:
        name = province['name']
        city_data = province['children']
        if name in provincial_cities:
            confirm = 0
            dead = 0
            heal = 0
            for city in city_data:
                data = city['total']
                confirm += data['confirm']
                dead += data['dead']
                heal += data['heal']
            city_dict = dict()
            city_dict['confirm'] = confirm
            city_dict['dead'] = dead
            city_dict['heal'] = heal
            cities_data[name] = city_dict
            cities_names.add(name)
        elif name == '台湾':
            TWN = city_data[0]['total']['confirm']


        else:
            for city in city_data:
                name = city['name']
                data = city['total']
                city_dict = dict()
                city_dict['confirm'] = data['confirm']
                city_dict['dead'] = data['dead']
                city_dict['heal'] = data['heal']
                cities_data[name] = city_dict
                cities_names.add(name)

city_converter = {'万宁':'海南','琼海':'海南','临高县':'海南','东方':'海南','定安县':'海南','乐东':'海南','昌江县':'海南','澄迈县':'海南','琼中县':'海南','营口':'大连','韩城':'渭南','陵水县':'海南'}

virus_data = get_data()
provincial_cities = {'上海','北京','天津','重庆'}
province_data = virus_data['areaTree'][0]['children']
cities_data = {'海南':{'confirm':0},'拉萨':{'confirm':1}}
cities_names = set()
TWN = 0
get_individual_cities()
for city in city_converter:
    cities_data[city_converter[city]]['confirm'] += cities_data[city]['confirm']




plt.figure(figsize=(16,8))
m = Basemap(
    llcrnrlon=77,
    llcrnrlat=14,
    urcrnrlon=140,
    urcrnrlat=51,
    projection='lcc',
    lat_1=33,
    lat_2=45,
    lon_0=100
)



m.readshapefile('/Users/tony/MyWork/Python-Exercise/gadm36_CHN_shp/gadm36_CHN_2', 'states', drawbounds=True)
m.readshapefile('/Users/tony/MyWork/Python-Exercise/gadm36_TWN_shp/gadm36_TWN_0', 'taiwan', drawbounds=True)

color_table = {'megadeep':(0.25,0.0,0.05),'deep':(0.5,0.0,0.15),'shallow':(1,1,0.8),'none':(1,1,1),'medium':(0.75,0.5,0.5)}


citynames=[]
colors={}
cmap = plt.cm.YlOrRd
vmax = 750
vmin = 0
for shapedict in m.states_info:
    if convert_cities[shapedict['NL_NAME_2']] == 0:
        colors[shapedict['NL_NAME_2']] = (1.0,1.0,1.0)
        citynames.append(shapedict['NL_NAME_2'])
    else:
        cityname = convert_cities[shapedict['NL_NAME_2']]
        num = cities_data[cityname]['confirm']
        cityname = shapedict['NL_NAME_2']
        '''
        if num >= 500:
            colors[cityname] = color_table['megadeep']
        elif num >= 100:
            colors[cityname] = color_table['deep']
        elif 10 <= num <= 99:
            colors[cityname] = color_table['medium']
        elif 1 <= num <= 9:
            colors[cityname] = color_table['shallow']
        else:
            colors[cityname] = color_table['none']
        '''
        colors[cityname] = cmap(1.1*(np.sqrt((num - vmin) / (vmax - vmin))))[:3]
        citynames.append(cityname)


ax = plt.gca()
for nshape, seg in enumerate(m.states):
    color = rgb2hex(colors[citynames[nshape]])
    poly = Polygon(seg, facecolor=color, edgecolor=color)
    ax.add_patch(poly)

ax.set_title('2019-nCoV',fontsize = 20)

colors_TWN = cmap(1.1*(np.sqrt((TWN - vmin) / (vmax - vmin))))[:3]
for nshape, seg in enumerate(m.taiwan):
    poly = Polygon(seg, facecolor=colors_TWN, edgecolor=color)
    ax.add_patch(poly)

plt.show()




